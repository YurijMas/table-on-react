{"version":3,"sources":["components/Cell/Cell.js","components/Row/Row.js","components/Table/Table.js","components/StartMenu/StartMenu.js","components/Paginator/Paginator.js","components/NewRowMenu/NewRowMenu.js","components/FindMenu/FindMenu.js","components/LineInformationContainer/LineInformationContainer.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","this","content","isHeader","onClickHeaderCellHandler","headerCellName","styles","onClick","name","className","React","Component","Row","rowNumber","state","renderHeader","bind","renderContentRows","onSelectedRowHandler","selectedNewRowHandler","selectedRowIndex","sortedBy","sortingDirection","ascend","String","fromCharCode","column","rowData","rowClasses","cellType","id","firstName","lastName","email","phone","Table","rowsNumber","renderRows","data","map","index","key","StartMenu","onStartButtonHandler","Paginator","isBackActive","isForwardActive","renderButtons","renderShortButtonList","pageQuantity","onSelectedPage","buttons","i","push","selectedPage","onSelectNextPage","onSelectPrevPage","disabled","NewRowMenu","onShowMenuClickHandler","onClickAddDataHandler","handleChange","inputsData","document","querySelector","classList","toggle","onNewDataHandler","setState","e","target","value","type","onChange","FindMenu","onFindMenuClickHandler","onClickFindDataHandler","rowText","onFindDataHandler","LineInformationContainer","description","hasOwnProperty","streetAddress","address","city","zip","App","fetchData","onSelectedPageNextHandler","onSelectedPagePrevHandler","onSelectedPageHandler","renderLoader","renderMainContent","renderTable","sortingHandler","findData","isStarted","isPending","filteredData","visibleRows","min","max","fetch","newData","json","slice","pageNumber","textContent","currentData","unshift","lowerCaseText","Promise","resolve","filter","item","Object","keys","some","toLowerCase","includes","text","then","newFilteredData","sortingColumn","reset","sort","a","b","aData","bData","getAttribute","Math","ceil","length","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.25452746.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Cell.css';\r\n\r\nexport default class Cell extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        const {content, isHeader, onClickHeaderCellHandler, headerCellName} = this.props;\r\n        const additionalStyle = isHeader ? 'header' : '';\r\n        const styles = 'cell_container ' + additionalStyle;\r\n        return <div onClick={onClickHeaderCellHandler} name={headerCellName} className={styles}>{content}</div>;\r\n    }\r\n}\r\n","import React from 'react';\r\nimport Cell from '../Cell/Cell';\r\nimport './Row.css';\r\n\r\nconst ASCEND_SYMBOL = 8593;\r\nconst DESCEND_SYMBOL = 8595;\r\n\r\nexport default class Row extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const rowNumber = props.rowNumber;\r\n        this.state = {\r\n            rowNumber,\r\n        };\r\n        this.renderHeader = this.renderHeader.bind(this);\r\n        this.renderContentRows = this.renderContentRows.bind(this);\r\n        this.onSelectedRowHandler = this.onSelectedRowHandler.bind(this);\r\n    }\r\n\r\n    onSelectedRowHandler() {\r\n        const {rowNumber, selectedNewRowHandler, selectedRowIndex} = this.props;\r\n        const newSelectedRowIndex = selectedRowIndex === rowNumber ? null : rowNumber;\r\n        selectedNewRowHandler(newSelectedRowIndex);\r\n    }\r\n\r\n    renderHeader() {\r\n        const {sortedBy, onClickHeaderCellHandler} = this.props;\r\n        const sortingDirection = sortedBy.ascend ? String.fromCharCode(ASCEND_SYMBOL) : String.fromCharCode(DESCEND_SYMBOL);\r\n        return (\r\n            <div className='row_container'>\r\n                <Cell onClickHeaderCellHandler={onClickHeaderCellHandler} headerCellName = 'id' isHeader={true} content={sortedBy.column === 'id' ? 'id ' + sortingDirection : 'id'}></Cell>\r\n                <Cell onClickHeaderCellHandler={onClickHeaderCellHandler} headerCellName = 'firstName' isHeader={true} content={sortedBy.column === 'firstName' ? 'firstName ' + sortingDirection : 'firstName'}></Cell>\r\n                <Cell onClickHeaderCellHandler={onClickHeaderCellHandler} headerCellName = 'lastName' isHeader={true} content={sortedBy.column === 'lastName' ? 'lastName ' + sortingDirection : 'lastName'}></Cell>\r\n                <Cell onClickHeaderCellHandler={onClickHeaderCellHandler} headerCellName = 'email' isHeader={true} content={sortedBy.column === 'email' ? 'email ' + sortingDirection : 'email'}></Cell>\r\n                <Cell onClickHeaderCellHandler={onClickHeaderCellHandler} headerCellName = 'phone' isHeader={true} content={sortedBy.column === 'phone' ? 'phone ' + sortingDirection : 'phone'}></Cell>\r\n            </div>\r\n            )\r\n    }\r\n\r\n    renderContentRows() {\r\n        const {rowData, selectedRowIndex, rowNumber} = this.props;\r\n        const rowClasses = selectedRowIndex === rowNumber ? 'row_container selected_row' : 'row_container';\r\n        return (\r\n            <div className={rowClasses} onClick={this.onSelectedRowHandler}>\r\n                <Cell cellType = 'rowDataid' content={rowData.id}></Cell>\r\n                <Cell cellType = 'firstName' content={rowData.firstName}></Cell>\r\n                <Cell cellType = 'lastName' content={rowData.lastName}></Cell>\r\n                <Cell cellType = 'email' content={rowData.email}></Cell>\r\n                <Cell cellType = 'phone' content={rowData.phone}></Cell>\r\n            </div>\r\n            )\r\n    }\r\n\r\n    render() {\r\n        const {isHeader} = this.props;\r\n        let rows;\r\n        if (isHeader) {\r\n            rows = this.renderHeader();\r\n        } else {\r\n            rows = this.renderContentRows();\r\n        }\r\n\r\n        return rows;\r\n    }\r\n}\r\n","import React from 'react';\r\nimport Row from '../Row/Row';\r\nimport './Table.css';\r\n\r\nexport default class Table extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            rowsNumber: 0,\r\n        }\r\n        this.renderRows = this.renderRows.bind(this);\r\n    }\r\n\r\n    renderRows() {\r\n        const {data, selectedNewRowHandler, selectedRowIndex} = this.props;\r\n        return data\r\n            .map((rowData, index) => <Row rowNumber={index} selectedRowIndex={selectedRowIndex} rowData={rowData} key={`row${index}`} selectedNewRowHandler={selectedNewRowHandler}/>);\r\n    }\r\n\r\n    render() {\r\n        const {sortedBy, onClickHeaderCellHandler} = this.props;\r\n        return (\r\n        <div className={'table_container'}>\r\n            <Row onClickHeaderCellHandler={onClickHeaderCellHandler} sortedBy={sortedBy} isHeader={true}/>\r\n            {this.renderRows()}\r\n        </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './StartMenu.css';\r\n\r\nfunction StartMenu(props) {\r\n    const {onStartButtonHandler} = props;\r\n    return (\r\n        <div className={'start_container'}>\r\n            <button onClick={onStartButtonHandler}>Start</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default StartMenu;","import React from 'react';\r\nimport './Paginator.css';\r\n\r\nexport default class Paginator extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isBackActive: false,\r\n            isForwardActive: false,\r\n        }\r\n        this.renderButtons = this.renderButtons.bind(this);\r\n        this.renderShortButtonList = this.renderShortButtonList.bind(this);\r\n    }\r\n\r\n    renderShortButtonList() {\r\n        const {pageQuantity, onSelectedPage} = this.props;\r\n        let buttons = [];\r\n        for (let i = 0; i < pageQuantity; i++) {\r\n            buttons.push(<button className={'page_button'} key={i} onClick={onSelectedPage}>{i + 1}</button>);\r\n        }\r\n        return buttons;\r\n    }\r\n\r\n    renderButtons() {\r\n        const {pageQuantity, onSelectedPage, selectedPage} = this.props;\r\n        if (pageQuantity <= 5) {\r\n            return this.renderShortButtonList();\r\n        } else if (selectedPage >= 5 && selectedPage <= pageQuantity - 4) {\r\n            return (\r\n                <span>\r\n                    <button className={'page_button'} onClick={onSelectedPage}>1</button>\r\n                    <span>...</span>\r\n                    <button className={'page_button'} onClick={onSelectedPage}>{selectedPage - 2}</button>\r\n                    <button className={'page_button'} onClick={onSelectedPage}>{selectedPage - 1}</button>\r\n                    <button className={'page_button'} onClick={onSelectedPage}>{selectedPage}</button>\r\n                    <button className={'page_button'} onClick={onSelectedPage}>{selectedPage + 1}</button>\r\n                    <button className={'page_button'} onClick={onSelectedPage}>{selectedPage + 2}</button>\r\n                    <span>...</span>\r\n                    <button className={'page_button'} onClick={onSelectedPage}>{pageQuantity}</button>\r\n                </span>\r\n            );\r\n        } else if (selectedPage > 5 && selectedPage >= pageQuantity - 4) {\r\n            return (\r\n                <span>\r\n                    <button className={'page_button'} onClick={onSelectedPage}>1</button>\r\n                    <span>...</span>\r\n                    <button className={'page_button'} onClick={onSelectedPage}>{pageQuantity - 4}</button>\r\n                    <button className={'page_button'} onClick={onSelectedPage}>{pageQuantity - 3}</button>\r\n                    <button className={'page_button'} onClick={onSelectedPage}>{pageQuantity - 2}</button>\r\n                    <button className={'page_button'} onClick={onSelectedPage}>{pageQuantity - 1}</button>\r\n                    <button className={'page_button'} onClick={onSelectedPage}>{pageQuantity}</button>\r\n                </span>\r\n            );\r\n        } else if (selectedPage <= 5 && selectedPage < pageQuantity - 4) {\r\n            return (\r\n                <span>\r\n                    <button className={'page_button'} onClick={onSelectedPage}>1</button>\r\n                    <button className={'page_button'} onClick={onSelectedPage}>2</button>\r\n                    <button className={'page_button'} onClick={onSelectedPage}>3</button>\r\n                    <button className={'page_button'} onClick={onSelectedPage}>4</button>\r\n                    <button className={'page_button'} onClick={onSelectedPage}>5</button>\r\n                    <span>...</span>\r\n                    <button className={'page_button'} onClick={onSelectedPage}>{pageQuantity}</button>\r\n                </span>\r\n            );\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {onSelectNextPage, onSelectPrevPage, pageQuantity, selectedPage} = this.props;\r\n        return (\r\n            <div className={'paginator_container'}>\r\n                <button onClick={onSelectPrevPage} disabled={selectedPage === 1}>Back</button>\r\n                {this.renderButtons()}\r\n                <button onClick={onSelectNextPage} disabled={selectedPage === pageQuantity}>Forward</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './NewRowMenu.css';\r\n\r\nexport default class NewRowMenu extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.onShowMenuClickHandler = this.onShowMenuClickHandler.bind(this);\r\n        this.onClickAddDataHandler = this.onClickAddDataHandler.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.state = {\r\n            inputsData: {\r\n                id: '',\r\n                firstName: '',\r\n                lastName: '',\r\n                email: '',\r\n                phone: '',\r\n            },\r\n        }\r\n    }\r\n\r\n    onShowMenuClickHandler() {\r\n        document.querySelector('.inputs_container').classList.toggle('inputs_container_visible');\r\n    }\r\n\r\n    onClickAddDataHandler() {\r\n        const onNewDataHandler = this.props.onNewDataHandler;\r\n        onNewDataHandler(this.state.inputsData);\r\n        this.setState({\r\n            inputsData: {\r\n                id: '',\r\n                firstName: '',\r\n                lastName: '',\r\n                email: '',\r\n                phone: '',\r\n            },\r\n        });\r\n    }\r\n\r\n    handleChange(e) {\r\n        const {value, name} = e.target;\r\n        const inputsData = {...this.state.inputsData};\r\n        inputsData[name] = value;\r\n        this.setState({\r\n            inputsData,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {id, firstName, lastName, email, phone} = this.state.inputsData;\r\n        return (\r\n            <div className={'new_row_menu_container'}>\r\n                <button onClick={this.onShowMenuClickHandler} className={'standart_button'}>Show menu</button>\r\n                <div className={'inputs_container'}>\r\n                    <span className={'field_name'}>ID:</span>\r\n                    <input type=\"text\" name=\"id\" onChange={this.handleChange} value={id}/><br/>\r\n                    <span className={'field_name'}>First name:</span>\r\n                    <input type=\"text\" name=\"firstName\" onChange={this.handleChange} value={firstName}/><br/>\r\n                    <span className={'field_name'}>Last name:</span>\r\n                    <input type=\"text\" name=\"lastName\" onChange={this.handleChange} value={lastName}/><br/>\r\n                    <span className={'field_name'}>Email:</span>\r\n                    <input type=\"text\" name=\"email\" onChange={this.handleChange} value={email}/><br/>\r\n                    <span className={'field_name'}>Phone:</span>\r\n                    <input type= \"text\" name=\"phone\" onChange={this.handleChange} value={phone}/><br/>\r\n                    <button onClick={this.onClickAddDataHandler}>Add new line</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport './FindMenu.css';\r\n\r\nexport default class FindMenu extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.onFindMenuClickHandler = this.onFindMenuClickHandler.bind(this);\r\n        this.onClickFindDataHandler = this.onClickFindDataHandler.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.state = {\r\n            rowText: '',\r\n        }\r\n    }\r\n\r\n    onFindMenuClickHandler() {\r\n        document.querySelector('.finder_input_container').classList.toggle('finder_input_container_visible');\r\n    }\r\n\r\n    onClickFindDataHandler() {\r\n        const onFindDataHandler = this.props.onFindDataHandler;\r\n        onFindDataHandler(this.state.rowText);\r\n        this.setState({\r\n            rowText: '',\r\n        });\r\n    }\r\n\r\n    handleChange(e) {\r\n        this.setState({\r\n            rowText: e.target.value,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={'findmenu_container'}>\r\n                <button className={'standart_button'} onClick={this.onFindMenuClickHandler}>Open finder menu</button>\r\n                <div className={'finder_input_container'}>\r\n                    <span className={'field_name finder_field_name'}>Текст для поиска:</span>\r\n                    <input type=\"text\" onChange={this.handleChange} value={this.state.rowText}/>\r\n                    <button onClick={this.onClickFindDataHandler}>Find</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport './LineInformationContainer.css';\r\n\r\nexport default class LineInformationContainer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        const {data} = this.props;\r\n        const {firstName, lastName} = data;\r\n        const description = data.hasOwnProperty('description') ? data.description : null;\r\n        const streetAddress = data.hasOwnProperty('address') ? data.address.streetAddress : null;\r\n        const city = data.hasOwnProperty('address') ? data.address.city : null;\r\n        const state = data.hasOwnProperty('address') ? data.address.state : null;\r\n        const zip = data.hasOwnProperty('address') ? data.address.zip : null;\r\n        return (\r\n            <div className={'line_information_container'}>\r\n                <div className={'detail_information_row'}>\r\n                    <div className={'detail_information_cell'}>Выбран пользователь:</div>\r\n                    <div className={'detail_information_cell'}>{`${firstName} ${lastName}`}</div>\r\n                </div>\r\n                <div className={'detail_information_row'}>\r\n                    <div className={'detail_information_cell'}>Описание:</div>\r\n                    <div className={'detail_information_cell'}>{description}</div>\r\n                </div>\r\n                <div className={'detail_information_row'}>\r\n                    <div className={'detail_information_cell'}>Адрес проживания:</div>\r\n                    <div className={'detail_information_cell'}>{streetAddress}</div>\r\n                </div>\r\n                <div className={'detail_information_row'}>\r\n                    <div className={'detail_information_cell'}>Город:</div>\r\n                    <div className={'detail_information_cell'}>{city}</div>\r\n                </div>\r\n                <div className={'detail_information_row'}>\r\n                    <div className={'detail_information_cell'}>Провинция / штат:</div>\r\n                    <div className={'detail_information_cell'}>{state}</div>\r\n                </div>\r\n                <div className={'detail_information_row'}>\r\n                    <div className={'detail_information_cell'}>Индекс:</div>\r\n                    <div className={'detail_information_cell'}>{zip}</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\nimport Table from './components/Table/Table';\nimport StartMenu from './components/StartMenu/StartMenu';\nimport Paginator from './components/Paginator/Paginator';\nimport NewRowMenu from './components/NewRowMenu/NewRowMenu';\nimport FindMenu from './components//FindMenu/FindMenu';\nimport LineInformationContainer from './components/LineInformationContainer/LineInformationContainer';\nimport './App.css';\n\nconst BIG_LIST = 'http://www.filltext.com/?rows=1000&id={number|1000}&firstName={firstName}&delay=3&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}';\nconst SMALL_LIST = 'http://www.filltext.com/?rows=32&id={number|1000}&firstName={firstName}&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}';\nconst STRINGS_ON_PAGE = 50;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.fetchData = this.fetchData.bind(this);\n    this.onStartButtonHandler = this.onStartButtonHandler.bind(this);\n    this.onSelectedPageNextHandler = this.onSelectedPageNextHandler.bind(this);\n    this.onSelectedPagePrevHandler = this.onSelectedPagePrevHandler.bind(this);\n    this.onSelectedPageHandler = this.onSelectedPageHandler.bind(this);\n    this.renderLoader = this.renderLoader.bind(this);\n    this.renderMainContent = this.renderMainContent.bind(this);\n    this.renderTable = this.renderTable.bind(this);\n    this.onNewDataHandler = this.onNewDataHandler.bind(this);\n    this.onFindDataHandler = this.onFindDataHandler.bind(this);\n    this.onClickHeaderCellHandler = this.onClickHeaderCellHandler.bind(this);\n    this.selectedNewRowHandler = this.selectedNewRowHandler.bind(this);\n    this.sortingHandler = this.sortingHandler.bind(this);\n    this.findData = this.findData.bind(this);\n    this.state = {\n      isStarted: false,\n      isPending: false,\n      sortedBy: {\n        column: null,\n        ascend: true,\n      },\n      data: [],\n      filteredData: [],\n      selectedPage: 1,\n      selectedRowIndex: null,\n      visibleRows: {\n        min: 0,\n        max: STRINGS_ON_PAGE,\n      },\n    }\n  }\n\n  async fetchData() {\n    this.setState({\n      isPending: true,\n    });\n    let newData;\n    let json;\n    try {\n        newData = await fetch(BIG_LIST);\n        json = await newData.json();\n    } catch(e) {\n        json=[];\n    }\n    this.setState({\n      data: json.slice(),\n      filteredData: json.slice(),\n    });\n    this.setState({\n      isPending: false,\n    });\n  }\n  \n  onStartButtonHandler() {\n    this.setState({\n      isStarted: true,\n    });\n    this.fetchData();\n  }\n\n  onSelectedPageNextHandler() {\n    let {selectedPage, visibleRows} = this.state;\n    selectedPage++;\n    visibleRows.min = visibleRows.min + STRINGS_ON_PAGE;\n    visibleRows.max = visibleRows.max + STRINGS_ON_PAGE;\n    this.setState({\n      visibleRows,\n      selectedPage,\n    });\n  }\n\n  onSelectedPagePrevHandler() {\n    let {selectedPage, visibleRows} = this.state;\n    selectedPage--;\n    visibleRows.min = visibleRows.min - STRINGS_ON_PAGE;\n    visibleRows.max = visibleRows.max - STRINGS_ON_PAGE;\n    this.setState({\n      visibleRows,\n      selectedPage,\n    });\n  }\n\n  onSelectedPageHandler(e) {\n    const pageNumber = e.target.textContent;\n    const selectedPage = +pageNumber;\n    let visibleRows = {};\n    visibleRows.min = pageNumber * STRINGS_ON_PAGE - STRINGS_ON_PAGE;\n    visibleRows.max = pageNumber * STRINGS_ON_PAGE;\n    this.setState({\n      visibleRows,\n      selectedPage,\n    });\n  }\n\n  onNewDataHandler(data) {\n    const currentData = [...this.state.data];\n    const newData = {...data};\n    currentData.unshift(newData);\n    this.setState({\n      data: currentData,\n      filteredData: currentData,\n    });\n  }\n\n  findData(lowerCaseText) {\n    const {filteredData} = this.state;\n    return new Promise(resolve => {\n      const newFilteredData = filteredData.filter(item => {\n        const strKeys = Object.keys(item);\n        return strKeys.some(key => String(item[key]).toLowerCase().includes(lowerCaseText));\n      });\n      resolve(newFilteredData);\n    });\n  }\n\n  onFindDataHandler(text) {\n    const {sortedBy} = this.state;\n    const lowerCaseText = text.toLowerCase();\n    if (lowerCaseText === '') {\n      this.sortingHandler(sortedBy.column, sortedBy.ascend, true)\n        .then(filteredData => {\n          this.setState({\n            filteredData,\n          });\n        });\n      return;\n    }\n    this.findData(lowerCaseText).then(newFilteredData => {\n      this.setState({\n        filteredData: [...newFilteredData],\n      });\n    });\n  }\n\n  sortingHandler(sortingColumn, ascend, reset) {\n    const {filteredData, data} = this.state;\n    return new Promise(resolve => {\n      const filteredDataCopy = reset ? [...data] : [...filteredData];\n      const tmpFilteredData = filteredDataCopy.sort((a, b) => {\n        const aData = a[sortingColumn];\n        const bData = b[sortingColumn];\n        if (sortingColumn === 'id') {\n          return ascend ? aData - bData : bData - aData; \n        } else {\n          if (aData > bData) {\n            return ascend ? 1 : -1;\n          }\n          if (aData < bData) {\n            return ascend ? -1 : 1;\n          }\n          return 0;\n        }\n      });\n      resolve(tmpFilteredData);\n    });\n  }\n\n  onClickHeaderCellHandler(e) {\n    const name = e.target.getAttribute('name');\n    const {sortedBy} = this.state;\n    let ascend;\n    let column = sortedBy.column;\n    if (name === sortedBy.column) {\n      if (sortedBy.ascend) {\n        ascend = false;\n      } else {\n        column = null;\n        ascend = true;\n      }\n    } else {\n      column = name;\n      ascend = true;\n    }\n    this.setState({\n      sortedBy: {\n          column,\n          ascend: ascend,\n      },\n    });\n    this.sortingHandler(column, ascend)\n        .then(filteredData => {\n          this.setState({\n            filteredData,\n          });\n        });\n  }\n\n  selectedNewRowHandler(selectedRowIndex) {\n    this.setState({\n      selectedRowIndex,\n    });\n  }\n\n  renderLoader() {\n    return (\n      <div className={'sk-circle'}>\n          <div className={'sk-circle1 sk-child'}></div>\n          <div className={'sk-circle2 sk-child'}></div>\n          <div className={'sk-circle3 sk-child'}></div>\n          <div className={'sk-circle4 sk-child'}></div>\n          <div className={'sk-circle5 sk-child'}></div>\n          <div className={'sk-circle6 sk-child'}></div>\n          <div className={'sk-circle7 sk-child'}></div>\n          <div className={'sk-circle8 sk-child'}></div>\n          <div className={'sk-circle9 sk-child'}></div>\n          <div className={'sk-circle10 sk-child'}></div>\n          <div className={'sk-circle11 sk-child'}></div>\n          <div className={'sk-circle12 sk-child'}></div>\n        </div>\n    );\n  }\n\n  renderTable() {\n    const {filteredData, visibleRows, selectedRowIndex, selectedPage, sortedBy} = this.state;\n    const pageQuantity = Math.ceil(filteredData.length / STRINGS_ON_PAGE);\n    return (\n      <div className={'table_wrapper'}>\n        <div className={'header_menu_container'}>\n            <FindMenu onNewDataHandler={this.onFindDataHandler} onFindDataHandler={this.onFindDataHandler}></FindMenu>\n            <NewRowMenu onNewDataHandler={this.onNewDataHandler}></NewRowMenu>\n        </div>\n        <Table \n            data={filteredData.slice(visibleRows.min, visibleRows.max)} \n            selectedNewRowHandler={this.selectedNewRowHandler} \n            selectedRowIndex={selectedRowIndex}\n            sortedBy={sortedBy}\n            onClickHeaderCellHandler={this.onClickHeaderCellHandler}\n        />\n        <div className={'footer_container'}>\n              {selectedRowIndex !== null ? <LineInformationContainer data={filteredData[selectedRowIndex]}/> : null}\n              <Paginator \n                pageQuantity={pageQuantity}\n                selectedPage={selectedPage}\n                onSelectNextPage={this.onSelectedPageNextHandler}\n                onSelectPrevPage={this.onSelectedPagePrevHandler}\n                onSelectedPage={this.onSelectedPageHandler}\n              />\n          </div>\n      </div>\n    )\n  }\n\n  renderMainContent() {\n    const {data, isPending} = this.state;\n    return (\n      <div className='app_container'>\n          {isPending ? this.renderLoader() : this.renderTable()}\n      </div>\n     )\n  }\n\n  render() {\n    return this.state.isStarted ?  this.renderMainContent() :\n      <StartMenu onStartButtonHandler={this.onStartButtonHandler}></StartMenu>;\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}